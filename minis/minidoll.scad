
//
// doll.scad
//

include <minilib.scad>;
include <mini_weapons.scad>;


function body_points(
  height,
  basin_ratio=0,
  waist_ratio=0,
  shoulder_ratio=0,
  to_hip=[ 90, 0 ],
  to_navel=[ 90, 0 ],
  to_neck=[ 90, 0 ],
  to_head=[ 90, 0 ],
  to_low_hip=[ 90, 0 ],
  to_left_hip=[ 0, 90 ],
  to_left_knee=[ -90, 0 ],
  to_left_ankle=[ -90, 0 ],
  to_left_toe=[ 0, 0 ],
  to_right_hip=[ 0, -90 ],
  to_right_knee=[ -90, 0 ],
  to_right_ankle=[ -90, 0 ],
  to_right_toe=[ 0, 0 ],
  to_left_shoulder=[ 0, -90 ],
  to_left_elbow=[ -90, 0 ],
  to_left_wrist=[ -90, 0 ],
  to_left_finger=[ -90, 0 ],
  to_right_shoulder=[ 0, 90 ],
  to_right_elbow=[ -90, 0 ],
  to_right_wrist=[ -90, 0 ],
  to_right_finger=[ -90, 0 ]
) =
  let(

    br =
      basin_ratio == 0 ? 0.9 :
      basin_ratio == "male" ? 0.9 :
      basin_ratio == "female" ? 1.5 :
        basin_ratio,
    wr =
      waist_ratio == 0 ?  1.1 :
        waist_ratio,
    sr =
      shoulder_ratio == 0 ?  2.1 :
      shoulder_ratio == "male" ? 2.1 :
      shoulder_ratio == "female" ? 2.0 :
        shoulder_ratio,

    hh = height / 8, // head height
    bw2 = hh * br / 2, // basin width / 2
    sw2 = hh * sr / 2, // shoulder width / 2
    ww2 = hh * wr / 2, // wast width / 2
    fl = hh * 0.7, // foot length
    hl = hh * 0.6, // hand length

    sp0 = [ 0, 0, 0 ],
    sp1 = _to_point(hh, to_hip, sp0),
    sp2 = _to_point(1.5 * hh, to_navel, sp1),
    sp3 = _to_point(0.5 * hh, to_neck, sp2),
    sp4 = _to_point(0.5 * hh, to_head, sp3),
      //
    sp1h = _to_point(0.7 * hh, to_low_hip, sp0),
    wal = _to_point(ww2, to_left_hip, sp1h),
    war = _to_point(ww2, to_right_hip, sp1h),
      // TODO bring back somehow

    llp0 = _to_point(bw2, to_left_hip, sp0),
    llp1 = _to_point(2 * hh, to_left_knee, llp0),
    llp2 = _to_point(2 * hh, to_left_ankle, llp1),
    llp3 = _to_point(fl, to_left_toe, llp2),

    rlp0 = _to_point(bw2, to_right_hip, sp0),
    rlp1 = _to_point(2 * hh, to_right_knee, rlp0),
    rlp2 = _to_point(2 * hh, to_right_ankle, rlp1),
    rlp3 = _to_point(fl, to_right_toe, rlp2),

    lap0 = _to_point(sw2, to_left_shoulder, sp2),
    lap1 = _to_point(1.5 * hh, to_left_elbow, lap0),
    lap2 = _to_point(1.3 * hh, to_left_wrist, lap1),
    lap3 = _to_point(hl, to_left_finger, lap2),

    rap0 = _to_point(sw2, to_right_shoulder, sp2),
    rap1 = _to_point(1.5 * hh, to_right_elbow, rap0),
    rap2 = _to_point(1.3 * hh, to_right_wrist, rap1),
    rap3 = _to_point(hl, to_right_finger, rap2),

    z0 = llp3.z,
    z1 = rlp3.z,
    z = - (z0 < z1 ? z0 : z1)

  ) [
    [ sp0, sp1, sp2, sp3, sp4 ], // spine points
    [ wal, sp1h, war ], // waist points
    [ llp0, llp1, llp2, llp3 ], // left leg points
    [ rlp0, rlp1, rlp2, rlp3 ], // right leg points
    [ lap0, lap1, lap2, lap3 ], // left arm points
    [ rap0, rap1, rap2, rap3 ], // right arm points
    z, // ground to start z
    hh, // head height
    [ [ "hh", hh ]  ] // debug dict
  ];

function bpoint(bpoints, name, default=undef) =
  let(

    n = name,

    sps = bpoints[0], // spine points
    wps = bpoints[1], // waist points
    llps = bpoints[2], // left leg points
    rlps = bpoints[3], // right leg points
    laps = bpoints[4], // left arm points
    raps = bpoints[5], // right arm points

    r =
      n == "spine" ? sps :
      n == "left leg" ? llps :
      n == "right leg" ? rlps :
      n == "left arm" ? laps :
      n == "right arm" ? raps :
      n == "left toe" ? llps[3] :
      n == "right toe" ? rlps[3] :
      n == "left ankle" ? llps[2] :
      n == "right ankle" ? rlps[2] :
      n == "left knee" ? llps[1] :
      n == "right knee" ? rlps[1] :
      n == "left hip" ? llps[0] :
      n == "right hip" ? rlps[0] :
      n == "left hand" ? laps[3] :
      n == "right hand" ? raps[3] :
      n == "left wrist" ? laps[2] :
      n == "right wrist" ? raps[2] :
      n == "left elbow" ? laps[1] :
      n == "right elbow" ? raps[1] :
      n == "left shoulder" ? laps[0] :
      n == "right shoulder" ? raps[0] :
      n == "head" ? sps[4] :
      n == "neck" ? sps[3] :
      n == "head height" ? bpoints[7] :
      n == "z" ? bpoints[6] :
      n == "left calf" ? _midpoint(llps[1], llps[2], 0.3) :
      n == "right calf" ? _midpoint(rlps[1], rlps[2], 0.3) :
      n == "left thigh" ? _midpoint(llps[0], llps[1], 0.5) :
      n == "right thigh" ? _midpoint(rlps[0], rlps[1], 0.5) :
      n == "left arm" ? _midpoint(laps[0], laps[1], 0.5) :
      n == "right arm" ? _midpoint(raps[0], raps[1], 0.5) :
      n == "left forearm" ? _midpoint(laps[1], laps[2], 0.5) :
      n == "right forearm" ? _midpoint(raps[1], raps[2], 0.5) :
      n == "left midneck" ? _midpoint(sps[3], laps[0], 0.5) :
      n == "right midneck" ? _midpoint(sps[3], raps[0], 0.5) :
        undef
  )
    r == undef ? default : r;

module _bal(p, d) {
  translate(p) sphere(d);
};
module _hul(p0, d0, p1, d1) {
  hull() { _bal(p0, d0); _bal(p1, d1); }
}


module body(
  body_points, // as generated by the body_points() function
  foot_diameter=0,
  ankle_diameter=0,
  calf_diameter=0,
  knee_diameter=0,
  thigh_diameter=0,
  buttock_diameter=0,
  shoulder_diameter=0,
  neck_diameter=0,
  elbow_diameter=0,
  wrist_diameter=0,
  palm_diameter=0,
  diameter=0
) {

  sps = body_points[0]; // spine points
  wps = body_points[1]; // waist points
  llps = body_points[2]; // left leg points
  rlps = body_points[3]; // right leg points
  laps = body_points[4]; // left arm points
  raps = body_points[5]; // right arm points
  z = body_points[6]; // foot to start point (basin) z distance
  hh = body_points[7]; // head height

  d = diameter > 0 ? diameter : hh / 4; // default diameter

  fd = foot_diameter > 0 ? foot_diameter : d;
  ad = ankle_diameter > 0 ? ankle_diameter : d;
  //cd = calf_diameter > 0 ? calf_diameter : d;
  kd = knee_diameter > 0 ? knee_diameter : d;
  //td = thigh_diameter > 0 ? thigh_diameter : d;
  bd = buttock_diameter > 0 ? buttock_diameter : d;
  sd = shoulder_diameter > 0 ? shoulder_diameter : d;
  nd = neck_diameter > 0 ? neck_diameter : d;
  ed = elbow_diameter > 0 ? elbow_diameter : d;
  wd = wrist_diameter > 0 ? wrist_diameter : d;
  pd = palm_diameter > 0 ? palm_diameter : d;

  _hul(llps[0], bd, llps[1], kd); // TODO replace buttock
  _hul(llps[1], kd, llps[2], ad);
  _hul(llps[2], ad, llps[3], fd);
  _hul(rlps[0], bd, rlps[1], kd); // TODO replace buttock
  _hul(rlps[1], kd, rlps[2], ad);
  _hul(rlps[2], ad, rlps[3], fd);

  _hul(llps[0], bd, sps[0], bd); // TODO replace buttock
  _hul(sps[0], bd, rlps[0], bd); // TODO replace buttock

  _hul(sps[0], d, sps[1], d);
  _hul(sps[1], d, sps[2], d);
  _hul(sps[2], d, sps[3], d);
  _hul(sps[3], d, sps[4], d);

  _hul(laps[0], sd, sps[2], d);
  _hul(sps[2], d, raps[0], sd);

  _hul(laps[0], sd, laps[1], ed);
  _hul(laps[1], ed, laps[2], wd);
  _hul(laps[2], wd, laps[3], pd);
  _hul(raps[0], sd, raps[1], ed);
  _hul(raps[1], ed, raps[2], wd);
  _hul(raps[2], wd, raps[3], pd);

  hull() {
    _bal(llps[0], d); _bal(rlps[0], d);
    _bal(wps[0], d); _bal(wps[2], d);
  }
  hull() {
    _bal(wps[0], d); _bal(wps[2], d);
    _bal(laps[0], d); _bal(sps[2], d); _bal(raps[0], d);
  }
}


module robe(
  body_points, // as generated by the body_points() function
  diameter=0
) {

  hh = body_points[7]; // head height
  //sps = body_points[0]; // spine points
  llps = body_points[2]; // left leg points
  rlps = body_points[3]; // right leg points
  laps = body_points[4]; // left arm points
  raps = body_points[5]; // right arm points
  z = body_points[6]; // start point altitude

  d = diameter > 0 ? diameter : hh / 4;

  //function to_ground(p) =
  //  [ p.x, p.y, -z ];

  hull() {

    _bal(llps[0], d);
    _bal(llps[1], d);
    _bal(llps[2], d);
      _bal(llps[3], d);
    _bal(rlps[0], d);
    _bal(rlps[1], d);
    _bal(rlps[2], d);
      _bal(rlps[3], d);

    //_bal(to_ground(laps[1]), d);
    //_bal(to_ground(laps[2]), d);
    //_bal(to_ground(raps[1]), d);
    //_bal(to_ground(raps[2]), d);

    _bal(laps[0], d);
    _bal(laps[1], d);
    _bal(laps[2], d);
    _bal(laps[3], d);
    _bal(raps[0], d);
    _bal(raps[1], d);
    _bal(raps[2], d);
    _bal(raps[3], d);
  }
}

module skirt(
  body_points,
  lratio=0.5,
  rratio=0.5,
  topd=0,
  bottomd=0
) {

  bps = body_points;

  lt = bpoint(bps, "left hip");
  rt = bpoint(bps, "right hip");

  lk = bpoint(bps, "left knee");
  rk = bpoint(bps, "right knee");

  hh = bpoint(bps, "head height");

  lb = _midpoint(lt, lk, lratio);
  rb = _midpoint(rt, rk, rratio);

  td = topd > 0 ? topd : hh * 0.28;
  bd = bottomd > 0 ? bottomd : hh * 0.6;

  hull() {
    _bal(lt, td);
    _bal(rt, td);
    translate(lb) cylinder(d=bd, h=0.01);
    translate(rb) cylinder(d=bd, h=0.01);
  }
}

module skull(body_points) {

  hp = body_points[0][4]; // head point
  hh = body_points[7]; // head height

  difference() {
    union() {
      translate([ hp.x, hp.y + hh / 10, hp.z - hh / 3 ])
        cylinder(d=hh/1.3, h=hh/3, center=true);
      translate([ 0, 0, hh / 7 ])
        scale([ 0.8, 1, 1 ])
          _bal(hp, hh * 0.6); // head
    }
    translate([ - hh / 3.7, hh / 2.1, hh / 7 ])
      _bal(hp, hh * 0.16); // eyesocket
    translate([ hh / 3.7, hh / 2.1, hh / 7 ])
      _bal(hp, hh * 0.16); // eyesocket
  }
}

module head(body_points) {

  h = bpoint(body_points, "head");
  hh = bpoint(body_points, "head height");

  d = hh * 0.6;

  hull() {
    scale([ 0.8, 1, 1 ]) _bal(h, d);
    translate([ 0, 0, hh * 0.2 ]) scale([ 0.8, 1, 1 ]) _bal(h, d);
  }
}

module cap(body_points) {

  h = bpoint(body_points, "head");
  hh = bpoint(body_points, "head height");

  translate(h + [ 0, hh * 0.03, hh * 0.15 ])
    rotate([ 40, 0, 0 ])
      dome(hh * 0.65, trunk_height=hh * 0.05);
}

module veil(
  body_points,
  thickness=0
) {

  hp = body_points[0][4]; // head point
  hh = body_points[7]; // head height

  t = thickness > 0 ? thickness : hh / 7;

  sd = hh * 0.2; // shoulder diameter
  sw = hh / 3; // shoulder width

  difference() {

    hull() {
      translate([ 0, 0, hh / 7 ]) scale([ 0.8, 1, 1 ]) _bal(hp, hh * 0.6 + t);
      translate([ -sw, 0, -2 * hh ]) _bal(hp, sd + t);
      translate([ sw, 0, -2 * hh ]) _bal(hp, sd + t);
    }
    union() {
      hull() {
        translate([ 0, 0, hh / 7 ]) scale([ 0.8, 1, 1 ]) _bal(hp, hh * 0.6);
        translate([ 0, 0, hh / 7 ]) scale([ 0.8, 1, 1 ]) _bal(hp, hh * 0.6);
        translate([ -sw, 0, -2 * hh ]) _bal(hp, sd);
        translate([ sw, 0, -2 * hh ]) _bal(hp, sd);
      }
      translate([ 0, hh / 2, hp.z - hh ])
        cube([ hh / 1.4, hh, 3 * hh ], center=true);
    }
  }
}


echo("======================================================================");


$fn = 24;

height = 33;

bps = body_points(
  height,
  to_hip=90,
  to_left_knee=-80,
  to_right_knee=-95,
  to_right_ankle=-95,
  to_left_toe=[ 0, 10 ],
  to_right_toe=[ 0, -10 ],
  to_left_wrist=-75,
  to_left_finger=-70,
  to_right_elbow=[ -70, 90 ],
  to_right_wrist=[ -70, -60 ],
  to_right_finger=[ 0, -90 ]
);
echo(bps);

//d = [ 0, 0, bps[6] ];
//
//#base();
//
////echo(concat("spine points", bps[0]));
//for (sp = bps[0]) translate(d + sp) sphere(0.7);
//
////echo(concat("waist points", bps[1]));
//for (wp = bps[1]) translate(d + wp) sphere(0.6);
//
////echo(concat("left leg points", bps[2]));
//for (llp = bps[2]) translate(d + llp) color("blue", 0.6) sphere(0.5);
//
//////echo(concat("right leg points", bps[3]));
//for (rlp = bps[3]) translate(d + rlp) color("red", 0.6) sphere(0.5);
//
//////echo(concat("left arm points", bps[4]));
//for (lap = bps[4]) translate(d + lap) color("red", 0.6) sphere(0.5);
//
////echo(concat("right arm points", bps[5]));
//for (rap = bps[5]) translate(d + rap) color("blue", 0.6) sphere(0.5);

//echo ("-------------------------------------------------------------------");
//translate(d + sps[3]) color("black") sphere(1);
//echo([ "hh", 33 / 8 ]);
//echo([ "sp3", sps[3] ]);
//echo([ "sp3 spherical", to_spherical(sps[3]) ]);

//_r = "A B C D E F G H I K L M N   O P R S T U   X";
//_g = "Α Β Γ Δ Ε Ζ Η Θ Ι Κ Λ Μ Ν Ξ Ο Π Ρ Σ Τ Υ Φ Χ Ψ Ω";

hh = bpoint(bps, "head height");

translate([ -25, 0, 0 ]) {
  base(text=" D", $fn=12);
  translate([ 0, 0, bps[6] ]) {
    body(bps, diameter=hh * 0.3);
    //robe(bps);
    skirt(bps, 0.77, 0.77, topd=hh * 0.32, bottomd=hh * 0.70);
    //veil(bps);
    //skull(bps);
    head(bps);
    cap(bps);
  }

  translate([ 5, 1, height * 0.43 ])
    rotate([ -135, 0, 45 ])
      norse_axe(height * 0.49, hh * 0.9, hh * 0.3);

  translate([ -hh * 0.2, -hh * 0.38, height * 0.51 ])
    rotate([ 189, 10, 0 ])
      long_sword(hh * 2.6, hh * 0.6); // scramax
}


//function _get(dict, key, default=undef) =
//  //let (r = search(key, dict)[0]) r == undef ? default : r;
//  search(key, dict)[0]) r == undef ? default : r;
//dict = [ [ "t", [ 90, 0 ] ] ];
//echo(dict);
//echo(_get(dict, "t"));

